/*
    adding the plugin jars to the classpath to apply them later.
    currently the new plugins DSL does apply them directly.
    there are other limitations too. See https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
    we don't need to apply the jruby and bintray plugin on the rootProject.
*/
buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  }
}

// modern plugins config
plugins {
  id "signing"
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
  id 'com.github.jruby-gradle.base' version '2.0.0'
}

// TIP use -PpublishRelease=true to active release behavior regardless of the version
status = project.hasProperty('publishRelease') && project.publishRelease.toBoolean() ?
    'release' : ((version == 'unspecified' || version.endsWith('-SNAPSHOT')) ? 'snapshot' : 'release')

ext {
  buildDateTime = new Date()
  (buildDateOnly, buildTimeOnly) = new java.text.SimpleDateFormat('yyyy-MM-dd HH:mm:ss.SSSZ').format(buildDateTime).split(' ')
  statusIsRelease = (status == 'release')

  // jar versions
  jrubyVersion = '9.4.7.0'
  junitVersion = '5.8.2'
  assertjVersion = '3.22.0'
  jsoupVersion = '1.17.2'

  // gem versions
  asciidoctorJVersion = project.hasProperty('asciidoctorJVersion') ? project.asciidoctorJVersion : '2.5.10'
  asciidoctorDiagramGemVersion = project.hasProperty('asciidoctorDiagramGemVersion') ? project.asciidoctorDiagramGemVersion : project(':asciidoctorj-diagram').version.replace('-', '.')
  asciidoctorDiagramBatikGemVersion = "1.17"
  barbyGemVersion = "0.6.9"
  rqrcodeGemVersion = "2.2.0"
  rexmlGemVersion = '3.2.6'
}

allprojects {
  group = 'org.asciidoctor'
  defaultTasks 'check'
}

subprojects {
  // NOTE applying Java plugin changes the status; take steps to preserve value
  def _status = status
  apply plugin: 'java-library'
  apply from: "$rootDir/gradle/providedConfiguration.gradle"

  status = _status

  def _javaVersion = 8
  if (project.name == "itest"
          || project.name == "asciidoctorj-diagram-jsyntrax") {
    _javaVersion = 11
  }
  project.tasks.withType(JavaCompile).configureEach { task ->
    task.options.release = _javaVersion
  }
  project.tasks.withType(GroovyCompile).configureEach {task ->
    task.options.release = _javaVersion
  }

  repositories {
    if (project.hasProperty('useMavenLocal') && project.useMavenLocal.toBoolean()) {
      mavenLocal()
    }

    mavenCentral()
  }

  dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
  }
  
  apply plugin: 'codenarc'
  codenarc {
    configFile = rootProject.file('config/codenarc/codenarc.groovy')
  }

  test {
    useJUnitPlatform()
    forkEvery = 10
    minHeapSize = '128m'
    maxHeapSize = '1024m'
    if (JavaVersion.current().isJava8Compatible()) {
      jvmArgs '-XX:-UseGCOverheadLimit'
    } else {
      jvmArgs '-XX:MaxPermSize=256m', '-XX:-UseGCOverheadLimit'
    }

    testLogging {
      // events 'passed', 'failed', 'skipped', 'standard_out', 'standard_error'
      // events 'standard_out', 'standard_error'
      afterSuite { desc, result ->
        if (!desc.parent && logger.infoEnabled) {
          logger.info "Test results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
        }
      }
    }
  }

}

configure(subprojects.findAll {it.name != 'itest'}) {
  apply from: rootProject.file('gradle/versioncheck.gradle')

  apply plugin: 'com.github.jruby-gradle.base'

  repositories {
    ruby.gems()
  }

  ext {
    // path to use for the prepared jruby gems
    preparedGems = new File("$buildDir/preparedGems")
  }

  if (JavaVersion.current().isJava8Compatible()) {
    javadoc {
      // Oracle JDK8 likes to fail the build over spoiled HTML
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }

  sourceSets {
    main {
      //let's register an output folder on the main SourceSet:
      output.dir(preparedGems, builtBy: 'jrubyPrepare')
      //it is now a part of the 'main' classpath and will be a part of the jar
    }
  }
}

configure(subprojects.findAll { it.name != 'itest'}) {

  java {
    withJavadocJar()
    withSourcesJar()
  }

  jruby {
    jrubyVersion = rootProject.jrubyVersion
  }

  ext {
    // path to use for the prepared jruby gems
    preparedGems = new File("$buildDir/preparedGems")
  }

  sourceSets {
    main {
      //let's register an output folder on the main SourceSet:
      output.dir(preparedGems, builtBy: 'jrubyPrepare')
      //it is now a part of the 'main' classpath and will be a part of the jar
    }
  }

  // QUESTION is this the right place to insert this task dependency in the lifecycle?
  // IMPORTANT The TMP or TEMP environment variable must be set for the gem install command to work on Windows
  processResources.dependsOn jrubyPrepare

}

nexusPublishing {
  repositories {
    sonatype {
      if (project.hasProperty("sonatypeUsername")) {
        username = project.sonatypeUsername
      }
      if (project.hasProperty("sonatypePassword")) {
        password = project.sonatypePassword
      }
      repositoryDescription = "Release ${project.group} ${project.version}"
    }
  }
  clientTimeout = Duration.ofMinutes(5)
}
